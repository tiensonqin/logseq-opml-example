<?xml version="1.0" encoding="UTF-8"?>
<opml version="2.0">
  <head>
    <title>
      advanced queries
    </title>
  </head>
  <body>
    <outline text="&#10;&#10;"/>
    <outline text="The database that Logseq used is [[https://github.com/tonsky/datascript]] , which is an immutable in-memory database and [Datalog](https://en.wikipedia.org/wiki/Datalog) query engine in Clojure and ClojureScript."/>
    <outline text="Logseq's database schema:" _note="  https://github.com/logseq/logseq/blob/master/src/main/frontend/db_schema.cljs&#10;"/>
    <outline text="Please check *Learn Datalog Today* [1] and *Datomic query syntax* [2] first if you're not familiar with Datalog."/>
    <outline text="**Some tips**" _note=""/>
    <outline text="The query format is something like this:" _note="&#10;&#10;| Name | Description | Default | Optional |&#10;|---|---|---|---|&#10;| title | query title, supports hiccup | | true |&#10;| query | datascript query | | false |&#10;| inputs | query inputs | | true |&#10;| view | (fn [query-result] hiccup) | | true |&#10;| collapsed? | Whether to collapse the result | false | true |&#10;| result-transform | (fn [query-result] do something) | | true |&#10;  &#10;&#10;    {:title  [:h2 &quot;Your query title&quot;]&#10;    &#10;     :query  [:find (pull ?b [*])&#10;    &#10;            :where ...]&#10;    &#10;     :inputs [...]&#10;    &#10;     :view             (fn [query-result] [:div ...])&#10;    &#10;     :result-transform (fn [query-result] ...)&#10;    &#10;     :collapsed? true}&#10;    &#10;"/>
    <outline text="**Examples**">
      <outline text="1. Get all tasks" _note="``` clojure&#10;#+BEGIN_QUERY&#10;{:title &quot;All tasks&quot;&#10; :query [:find (pull ?b [*])&#10;       :where&#10;       [?b :block/marker ?m]&#10;       [(not= ?m &quot;nil&quot;)]]}&#10;#+END_QUERY&#10;```&#10;	        &#10;"/>
      <outline text="2. Get all tasks with a tag &quot;project&quot;" _note="``` clojure&#10;#+BEGIN_QUERY&#10;{:title &quot;All todos with tag project&quot;&#10; :query [:find (pull ?b [*])&#10;       :where&#10;       [?p :page/name &quot;project&quot;]&#10;       [?b :block/ref-pages ?p]]}&#10;#+END_QUERY&#10;```"/>
      <outline text="3. Blocks in 7ds with a page reference of datalog" _note="``` clojure&#10;	        &#10;	        #+BEGIN_QUERY&#10;	        {:title &quot;Blocks in 7ds with a page reference of datalog&quot;&#10;	         :query [:find (pull ?b [*])&#10;	               :in $ ?start ?today ?tag&#10;	               :where&#10;	               [?b :block/page ?p]&#10;	               [?p :page/journal-day ?d]&#10;	               [(&gt;= ?d ?start)]&#10;	               [(&lt;= ?d ?today)]&#10;	               [?b :block/ref-pages ?rp]&#10;	               [?rp :page/name ?tag]]&#10;	         :inputs [:7d-before :today &quot;datalog&quot;]}&#10;	        #+END_QUERY&#10;```"/>
      <outline text="4. All TODOs" _note="``` clojure&#10;#+BEGIN_QUERY&#10;{:title &quot;TODO&quot;&#10; :query [:find (pull ?b [*])&#10;       :where&#10;       [?b :block/marker ?marker]&#10;       [(= &quot;TODO&quot; ?marker)]]}&#10;#+END_QUERY&#10;```"/>
      <outline text="5. All the tags specified in the front matter (tags: tag1, tag2)" _note="``` clojure&#10;#+BEGIN_QUERY&#10;{:title &quot;All page tags&quot;&#10;:query [:find ?tag-name&#10;      :where&#10;      [?tag :page/name ?tag-name]]&#10;:view (fn [tags]&#10;      [:div&#10;       (for [tag (flatten tags)]&#10;         [:a.tag.mr-1 {:href (str &quot;/page/&quot; tag)}&#10;          (str &quot;#&quot; tag)])])}&#10;#+END_QUERY&#10;```"/>
      <outline text="6. All pages have a &quot;programming&quot; tag" _note="``` clojure&#10;#+BEGIN_QUERY&#10;{:title &quot;All pages have a *programming* tag&quot;&#10; :query [:find ?name&#10;       :in $ ?tag&#10;       :where&#10;       [?t :page/name ?tag]&#10;       [?p :page/tags ?t]&#10;       [?p :page/name ?name]]&#10; :inputs [&quot;programming&quot;]&#10; :view (fn [result]&#10;       [:div.flex.flex-col&#10;        (for [page result]&#10;          [:a {:href (str &quot;/page/&quot; page)} (clojure.string/capitalize page)])])}&#10;#+END_QUERY&#10;```"/>
      <outline text="7. Get all the blocks with the property &quot;type&quot; and the value &quot;programming_lang&quot;" _note="``` clojure&#10;	        &#10;	        #+BEGIN_QUERY&#10;	        {:title [:h2 &quot;Programming languages list&quot;]&#10;	         :query [:find (pull ?b [*])&#10;	               :where&#10;	               [?b :block/properties ?p]&#10;	               [(get ?p &quot;type&quot;) ?t]&#10;	               [(= &quot;programming_lang&quot; ?t)]]&#10;	         }&#10;	        #+END_QUERY&#10;```"/>
      <outline text="8. All todos tagged using current page" _note="``` clojure&#10;	        &#10;	        #+BEGIN_QUERY&#10;	        {:title &quot;All todos tagged using current page&quot;&#10;	         :query [:find (pull ?b [*])&#10;	               :in $ ?current-page&#10;	               :where&#10;	               [?p :page/name ?current-page]&#10;	               [?b :block/marker ?marker]&#10;	               [?b :block/ref-pages ?p]&#10;	               [(= &quot;TODO&quot; ?marker)]]&#10;	         :inputs [:current-page]}&#10;	        #+END_QUERY&#10;```"/>
      <outline text="9. Tasks made active in the last 2 weeks" _note="``` clojure&#10;	        &#10;	        #+BEGIN_QUERY&#10;	        {:title &quot;🟢 ACTIVE&quot;&#10;	          :query [:find (pull ?h [*])&#10;	                  :in $ ?start ?today&#10;	                  :where&#10;	                  [?h :block/marker ?marker]&#10;	                  [?h :block/page ?p]&#10;	                  [?p :page/journal? true]&#10;	                  [?p :page/journal-day ?d]&#10;	                  [(&gt;= ?d ?start)]&#10;	                  [(&lt;= ?d ?today)]&#10;	                  [(contains? #{&quot;NOW&quot; &quot;DOING&quot;} ?marker)]]&#10;	          :inputs [:14d :today]&#10;	          :result-transform (fn [result]&#10;	                              (sort-by (fn [h]&#10;	                                         (get h :block/priority &quot;Z&quot;)) result))&#10;	          :collapsed? false}&#10;	        #+END_QUERY&#10;```"/>
      <outline text="10. Tasks referencing due dates in the past" _note="``` clojure&#10;	        &#10;	        #+BEGIN_QUERY&#10;	         {:title &quot;⚠️ OVERDUE&quot;&#10;	          :query [:find (pull ?h [*])&#10;	                  :in $ ?start ?today&#10;	                  :where&#10;	                  [?h :block/marker ?marker]&#10;	                  [?h :block/ref-pages ?p]&#10;	                  [?p :page/journal? true]&#10;	                  [?p :page/journal-day ?d]&#10;	                  [(&gt;= ?d ?start)]&#10;	                  [(&lt;= ?d ?today)]&#10;	                  [(contains? #{&quot;NOW&quot; &quot;LATER&quot; &quot;TODO&quot; &quot;DOING&quot;} ?marker)]]&#10;	          :inputs [:56d :today]&#10;	          :collapsed? false}&#10;	        #+END_QUERY&#10;```"/>
      <outline text="11. Tasks referencing due dates up to 10 days ahead" _note="``` clojure&#10;	        &#10;	        #+BEGIN_QUERY&#10;	            {:title &quot;📅 NEXT&quot;&#10;	          :query [:find (pull ?h [*])&#10;	                  :in $ ?start ?next&#10;	                  :where&#10;	                  [?h :block/marker ?marker]&#10;	                  [?h :block/ref-pages ?p]&#10;	                  [?p :page/journal? true]&#10;	                  [?p :page/journal-day ?d]&#10;	                  [(&gt; ?d ?start)]&#10;	                  [(&lt; ?d ?next)]&#10;	                  [(contains? #{&quot;NOW&quot; &quot;LATER&quot; &quot;DOING&quot; &quot;TODO&quot;} ?marker)]]&#10;	          :inputs [:today :10d-after]&#10;	          :collapsed? false}&#10;	        #+END_QUERY&#10;```"/>
      <outline text="12. Tasks from last week which are still outstanding (may slip soon!)" _note="``` clojure&#10;	        &#10;	        #+BEGIN_QUERY&#10;	           {:title &quot;🟠 SLIPPING&quot;&#10;	          :query [:find (pull ?h [*])&#10;	                  :in $ ?start ?today&#10;	                  :where&#10;	                  [?h :block/marker ?marker]&#10;	                  [?h :block/page ?p]&#10;	                  [?p :page/journal? true]&#10;	                  [?p :page/journal-day ?d]&#10;	                  [(&gt;= ?d ?start)]&#10;	                  [(&lt;= ?d ?today)]&#10;	                  [(contains? #{&quot;NOW&quot; &quot;LATER&quot; &quot;TODO&quot; &quot;DOING&quot;} ?marker)]]&#10;	          :inputs [:7d :today]&#10;	          :result-transform (fn [result]&#10;	                              (sort-by (fn [h]&#10;	                                         (get h :block/created-at)) result))&#10;	          :collapsed? true}&#10;	        #+END_QUERY&#10;```"/>
      <outline text="13. Tasks created more than 1 week ago, less old than 2 months but still outstanding" _note="``` clojure&#10;	        &#10;	        #+BEGIN_QUERY&#10;	        {:title &quot;🔴 STALLED&quot;&#10;	          :query [:find (pull ?h [*])&#10;	                  :in $ ?start ?today&#10;	                  :where&#10;	                  [?h :block/marker ?marker]&#10;	                  [?h :block/page ?p]&#10;	                  [?p :page/journal? true]&#10;	                  [?p :page/journal-day ?d]&#10;	                  [(&gt;= ?d ?start)]&#10;	                  [(&lt;= ?d ?today)]&#10;	                  [(contains? #{&quot;NOW&quot; &quot;LATER&quot; &quot;TODO&quot; &quot;DOING&quot;} ?marker)]]&#10;	          :inputs [:56d :8d]&#10;	          :result-transform (fn [result]&#10;	                              (sort-by (fn [h]&#10;	                                         (get h :block/created-at)) result))&#10;	          :collapsed? true}&#10;	         ]}&#10;	        #+END_QUERY&#10;```"/>
      <outline text="14. Next 7 days' deadline or schedule" _note="``` clojure&#10;#+BEGIN_QUERY&#10;{:title &quot;next 7 days' deadline or schedule&quot;&#10;  :query [:find (pull ?block [*])&#10;          :in $ ?start ?next&#10;          :where&#10;          (or&#10;            [?block :block/scheduled ?d]&#10;            [?block :block/deadline ?d])&#10;          [(&gt; ?d ?start)]&#10;          [(&lt; ?d ?next)]]&#10;  :inputs [:today :7d-after]&#10;  :collapsed? false}&#10;#+END_QUERY&#10;```&#10;	         ((60531c23-238e-4748-9b19-27088f9c3771)) &#10;"/>
    </outline>
    <outline text="**Resources**">
      <outline text="[^1]: [Learn Datalog Today](http://www.learndatalogtoday.org/)  is an interactive tutorial designed to teach you the Datomic dialect of Datalog."/>
      <outline text="[2] : [[https://docs.datomic.com/query.html]]"/>
    </outline>
  </body>
</opml>